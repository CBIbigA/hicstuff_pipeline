configfile:"config/config.yaml"

IN=config["general"]["samplein"]
OUT=config["general"]["sampleout"]

GENOME=config["genome"]["dir"]+config["genome"]["name"]+config["genome"]["ext"]
EXT=config["raw_spec"]["ext"]
R1=config["raw_spec"]["pairs_ext"][0]
R2=config["raw_spec"]["pairs_ext"][1]

wildcard_constraints:
    extension=config["raw_spec"]["pairs_expr"]



rule all:
	input:
		expand(OUT+"out_{prefix}_{aligner}/{prefix}_hicstuff_{mapping}.{matrix}",
			prefix=config["general"]["samples"],
			aligner=["bowtie2"],
			mapping=["iterative"],
			matrix=["mcool","hic"])

rule cutadapt:
	input:
		IN+"{prefix}{extension}"+EXT
	output:
		fastq=IN+"{prefix}{extension}.trimmed"+EXT,
		qc=IN+"{prefix}{extension}.trimmed.qc"
	log:
		OUT+"logs/cutadapt/{prefix}{extension}.log"
	benchmark:
		OUT+"benchmark/cutadapt/{prefix}{extension}.txt"
	threads:config["general"]["threads"]["trimming"]
	params:
		adapters = "",
		extra = "--cut 10"
	conda:
		"workflow/envs/cutadapt.yaml"
	shell:
		"cutadapt {params.adapters} {params.extra} -j {threads} -o {output.fastq} {input} > {output.qc} {log}"


if config["hicstuff"]["matfmt"] =="bg2":
	out_format_hicstuff_file=".bg2"
elif config["hicstuff"]["matfmt"] == "cool":
	out_format_hicstuff_file=".cool"
else:
	config["hicstuff"]["matfmt"] == "graal"
	out_format_hicstuff_file = ".tsv"

digestion=",".join(config["hicstuff"]["digestion"])

if config["hicstuff"]["rm_duplicates"]:
	out_format_hicstuff_pairs=".valid_idx_pcrfree.pairs"
	config["hicstuff"]["supp"]=config["hicstuff"]["supp"]+" --duplicates"
else:
	out_format_hicstuff_pairs=".valid_idx.pairs"

rule hicstuff_pipeline:
	input:
		ref=GENOME,
		fastq1=IN+"{prefix}"+R1+".trimmed"+EXT,
		fastq2=IN+"{prefix}"+R2+".trimmed"+EXT
	output:
		outfile=OUT+"out_{prefix}_{aligner}/{prefix}_hicstuff_{mapping}"+out_format_hicstuff_file,
		outpair=OUT+"out_{prefix}_{aligner}/tmp/{prefix}_hicstuff_{mapping}"+out_format_hicstuff_pairs
	params:
		outdir="out_{prefix}_{aligner}",
		mapping="{mapping}",
		aligner="{aligner}",
		prefix_hicstuff = "{prefix}_hicstuff_{mapping}",
		matfmt=config["hicstuff"]["matfmt"],
		digestion=digestion,
		supp=config["hicstuff"]["supp"]
	log:
		OUT+"logs/hicstuff_pipeline/{prefix}_hicstuff_{aligner}_{mapping}.log"
	benchmark:
		OUT+"benchmark/hicstuff_pipeline/{prefix}_hicstuff_{aligner}_{mapping}.txt"
	threads:config["general"]["threads"]["aln"]
	conda: "workflow/envs/hicstuff.yaml"
	shell:
		"hicstuff pipeline -t {threads} "
		"-a {params.aligner} -e {params.digestion} "
		"-g {input.ref} --mapping={params.mapping} "
		"-o {params.outdir} --prefix {params.prefix_hicstuff} "
		"{params.supp} "
		"--matfmt {params.matfmt} "
		"{input.fastq1} {input.fastq2} > {log}"



rule generate_site_positions:
	input:
		ref=GENOME
	output:
		OUT+config["genome"]["name"]+config["juicer"]["digestion"]+".txt"
	params:
		script=config["juicer"]["generate_site_positions"],
		digestion=config["juicer"]["digestion"],
		genome=config["genome"]["name"]
	log:
		OUT+"logs/generate_site_positions/{params.digestion}_{params.genome}.log"
	benchmark:
		OUT+"benchmark/generate_site_positions/{params.digestion}_{params.genome}.txt"
	conda: "workflow/envs/pairtools.yaml"
	shell:
		"{params.script} {params.digestion} {params.genome} {input}"

rule pairtools_sort:
	input:
		pairs=OUT+"out_{prefix}_{aligner}/tmp/{prefix}_hicstuff_{mapping}"+out_format_hicstuff_pairs
	output:
		temp(OUT+"out_{prefix}_{aligner}/tmp/{prefix}_hicstuff_{mapping}.sorted.pairs")
	log:
		OUT+"logs/pairtools_sort/{prefix}_{aligner}_{mapping}.log"
	benchmark:
		OUT+"benchmark/pairtools_sort/{prefix}_{aligner}_{mapping}.txt"
	conda: "workflow/envs/pairtools.yaml"
	threads:config["general"]["threads"]["matrix"]
	shell:
		"pairtools sort --nproc {threads} {input} -o {output} > {log}"


rule makeChromSize:
	input:
		fasta=GENOME
	output:
		chromsize=OUT+config["genome"]["name"]+"chrom.size",
		fai=GENOME+".fai"
	params:
		genome=config["genome"]["name"]
	log:
		OUT+"logs/makeChromSize/{params.genome}.log"
	benchmark:
		OUT+"benchmark/makeChromSize/{params.genome}.txt"
	conda: "workflow/envs/samtools.yaml"
	shell:
		"samtools faidx {input.fasta} -o {output.fai} && cut -f1,2 {output.fai} > {output.chromsize}"




rule juicer_pre:
	input:
		pairfile=OUT+"out_{prefix}_{aligner}/tmp/{prefix}_hicstuff_{mapping}.sorted.pairs",
		digestion_sites=OUT+config["genome"]["name"]+config["juicer"]["digestion"]+".txt",
		chromsize=OUT+config["genome"]["name"]+"chrom.size"
	output:
		OUT+"out_{prefix}_{aligner}/{prefix}_hicstuff_{mapping}.hic"
	log:
		OUT+"logs/juicer_pre/{prefix}_{aligner}_{mapping}.log"
	benchmark:
		OUT+"benchmark/juicer_pre/{prefix}_{aligner}_{mapping}.txt"
	conda: "workflow/envs/java-jdk.yaml"
	threads:config["general"]["threads"]["matrix"]
	params:
		juicertools=config["juicer"]["juicertools"],
		resolutions=config["juicer"]["resolutions"]
	shell:
		"java -jar {params.juicertools} pre -f {input.digestion_sites} --threads {threads} -r {params.resolutions} {input.pairfile} {output} {input.chromsize}"

rule cooler_pairs:
	input:
		pairfile=OUT+"out_{prefix}_{aligner}/tmp/{prefix}_hicstuff_{mapping}.sorted.pairs",
		chromsize=OUT+config["genome"]["name"]+"chrom.size"
	output:
		OUT+"out_{prefix}_{aligner}/{prefix}_hicstuff_{mapping}.cool"
	log:
		OUT+"logs/cooler_pairs/{prefix}_{aligner}_{mapping}.log"
	benchmark:
		OUT+"benchmark/cooler_pairs/{prefix}_{aligner}_{mapping}.txt"
	conda: "workflow/envs/cooler.yaml"
	params:
		minres=config["cooler"]["minres"]
	shell:
		"cooler cload pairs -c1 2 -p1 3 -c2 4 -p2 5 {input.chromsize}:{params.minres} {input.pairfile} {output}"


rule cooler_zoomify:
	input:
		coolfile=OUT+"out_{prefix}_{aligner}/{prefix}_hicstuff_{mapping}.cool"
	output:
		OUT+"out_{prefix}_{aligner}/{prefix}_hicstuff_{mapping}.mcool"
	log:
		OUT+"logs/cooler_zoomify/{prefix}_{aligner}_{mapping}.log"
	benchmark:
		OUT+"benchmark/cooler_zoomify/{prefix}_{aligner}_{mapping}.txt"
	conda: "workflow/envs/cooler.yaml"
	threads:config["general"]["threads"]["matrix"]
	params:
		resolutions=config["cooler"]["resolutions"],
		options=config["cooler"]["options"]
	shell:
		"cooler zoomify {params.options} -p {threads} -r {params.resolutions} {input}"



